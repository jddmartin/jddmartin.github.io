#!/usr/bin/python
# make_rfexp_schematic_mouseover_pages.py
#
# XX Things to do:
# 0) document how to use imagemagick's "convert" for getting pdf's
#    into jpg's
# 1) figure out best way to "tar" everything up for transfer
#    to server(permissions etc...)
# 2) put in generic programming directory with example
# 3) put code under version control
#
# J. Martin, Winter 2011
#
# Python code to assist in making web-pages with client-side Javascript
# for the apparatus diagrams in Phys360/460, Experiment 10:
# "Radio frequency electronics and frequency stabilization"
# This code is quite general and could be used to generate
# similar apparatus diagrams for other labs.
# The idea is that as different parts of the schematic apparatus diagrams are 
# "mouse overed" on a web-page, illustrative photos appear to the side, so
# that the students can readily identify the specific piece of equipment
# that corresponds to the schematic symbol on the diagram.  Clicking
# on the device brings you to a web-page that gives more detail.
#
# Given device descriptions (in a configuration file), photographs of
# of the devices (device image files), schematic diagrams (in image
# files), and "image maps" corresponding to the schematic diagrams,  
# this code generates the relevant html and javascript pages, and
# scales the device images appropriately.  
# No *.css files are generated by this program.
# However the generated html expects certain *.css files to be present,
# so these need to be created.
#
# Before using this program it is necessary to: 
# 1) scale the schematic diagrams for each part to the appropriate 
#    size (more below) and make sure that they are in the right format 
#    (i.e. jpg instead of pdf or png). 
#    These images will be files in the current directory called 
#    "PART.jpg" where PART refers to the part of the experiment the
#    schematic diagram corresponds to.  
#    e.g. "part_a.jpg"  for part a, and a jpg file.
#    The program "make_part_images.py" can be used for this purpose
#    (it's hard-wired for some specific files, but it is possible to
#    get general idea from this file).
# 2) create an "image" map file identifying regions of the schematic diagram 
#    image corresponding to different devices.  This image map can be generated
#    using GIMP (v.2.6.8), see "Filters -> Web -> Image Map ...", and
#    should be named "PART.jpg.map" (GIMP's default) (e.g. "part_a.jpg.map")
#    The image map should contain links in the format "devices/ADEVICE.html", 
#    where ADEVICE is something like "circulator".  This will be used 
#    as a dictionary key in this code for looking up descriptions of the 
#    device in the configuration file.
# 3) set image file widths suitable for web-pages in the configuration file.
# 4) enter the descriptions of the different parts of the experiment,
#    and descriptions of the devices in the configuration file.
#    The desired image sizes (appropriate for our .css files) should
#    be in there as well.
# 5) ensure that there are device images of the form "DEVICE_master.jpg"
#    in the the "/device" sub-directory, for all devices.  These should
#    be high resolution images.  They will be resized to sizes
#    appropriate for the main part page ("DEVICE_thumb.jpg")
#    and the device page ("DEVICE_page.jpg").
# 6) check that there are templates for the web-pages and javascript in
#    the "/templates" sub-directory.  These can be copied from project
#    to project unchanged.
# Once all of these files are in place, this entire script can be run.  If you
# want to mess around with individual parts, it may be better
# to import this as a module.

schematic_drawing_filetype=".jpg" # no other types have been tested!
master_drawing_filetype=".jpg" # no other types have been tested!
config_filename="experiment_config.py"

import string, re, Image, ImageDraw

def make_device_images(device):
    """\
    Rescale the high resolution "device/DEVICE_master.jpg" images to make 
    "device/DEVICE_thumb.jpg" and "device/DEVICE_page.jpg" using
    the horizontal widths specified in the configuration file (aspect
    ratio remains unchanged).  The corresponding image heights are returned
    as they are needed when generating the html that uses these images.
    """

    # read in part and device descriptions, desired image scalings:
    execfile(config_filename)

    device_image_heights={}
    for image in ['thumb','page']:
        im=Image.open("devices/"+device
                             +"_master"+master_drawing_filetype)
        im.thumbnail((device_image_widths[image],device_image_widths[image]*10),
                       Image.ANTIALIAS)

        device_image_heights[image]=im.size[1]
        im.save("devices/"+device+"_"+image+master_drawing_filetype)
    return device_image_heights


def make_device_page(device,device_image_heights):
    """\
    Generate the html page for a device that gives more detail
    on its operation.  If the device name is DEVICE, it will
    make the page "devices/DEVICE.html", using the
    descriptions in the configuration file.
    """

    # read in part and device descriptions, desired image scalings:
    execfile(config_filename)

    try:
        long_description=device_long_descriptions[device]
    except KeyError: # no long description available -- use short one
        long_description=device_descriptions[device]

    # read in page template:
    fp=open("templates/device.html")
    device_html_template=string.Template(fp.read())
    fp.close()

    sub_dict={'webpage_title':webpage_title,
              'page_image':'"'+device+'_page'+master_drawing_filetype+'"',
              'long_description':long_description,
              'image_page_width_pixels':device_image_widths['page'],
              'image_page_height_pixels':device_image_heights['page'],
              'comment':'<!-- machine generated; do not edit! -->'
              }
    html=device_html_template.substitute(sub_dict)
    fp=open("devices/"+device+".html","w")
    fp.write(html)
    fp.close() 

def make_default_image_thumb(device_image_heights):
    """\
    Makes a default "white image" that will be seen when mouse is not
    over any device in the schematic.  It is essential that at least 
    one "make_device_images" call has been made prior to using this function 
    so that the height of this default thumbnail is known.
    """

    # read in part and device descriptions, desired image scalings:
    execfile(config_filename)

    im_default=Image.new('RGB',
                         (device_image_widths['thumb'],
                          device_image_heights['thumb']),
                         (255,255,255))
    im_default.save("devices/default_thumb"+master_drawing_filetype) 

def make_part_page(part,device_image_heights):
    """\
    Makes the .html and .js files corresponding to "part" of the experiment.
    Requires that a corresponding image map file has been generated.
    e.g. with part="part_a" and the files: "part_a.jpg", "part_a.jpg.map" 
    in the current directory, it will generate the output files:
    "part_a.html" and "part_a.js"
    """

    # read in part and device descriptions, desired image scalings:
    execfile(config_filename)

    # check to make sure "part" is valid:
    for tpart in part_descriptions.keys():
        if part == tpart: break
    else:
        print "unrecognized part"
        return 1

    # decide size of device thumbnails from default thumbnail image:
    (thumb_width_pixels,thumb_height_pixels)=Image.open(
        "devices/default_thumb"+master_drawing_filetype).size

    # take image map from GIMP, combine with our html template for the
    # part page and add javascript for mouseovers etc..
    image_map_filename=part+schematic_drawing_filetype+".map"
    fp=open(image_map_filename)
    image_map=fp.read()
    fp.close()
    
    # change filename used in the image map to refer to the file
    # with the devices "outlined":
    image_map=re.sub(r'(<img src=")(.*?)(")',r'\1'+part+
                     '_outlines'+schematic_drawing_filetype+r'\3',image_map)

    # modify image map so that javascript calls are made on mouseovers:
    area_regexp=r'<area.*href="devices/(.*?).html".*?>'
    devices=[]
    end_of_last_match_position=0
    new_image_map=""
    for i,match in enumerate(re.finditer(area_regexp,image_map)):
        wholematch=match.group(0)
        device=match.group(1)
        devices.append(device)
        new_info=('onMouseover="changeSrc('+str(i+1)+
                  ')" onMouseout="changeSrc(0)" />')
        new_image_map=(new_image_map+
                       image_map[end_of_last_match_position:match.span(0)[0]]+
                       re.sub("/>",new_info,wholematch))
        end_of_last_match_position=match.span(0)[1]

    new_image_map=new_image_map+image_map[end_of_last_match_position:]

    # insert new image map into html template for "part" page:
    fp=open("templates/part.html")
    part_html_template=string.Template(fp.read())
    fp.close()
    sub_dict={'webpage_title':webpage_title,
                   'part':part,
                   'image_map':new_image_map,
                   'part_description':part_descriptions[part],
                   'thumb_width_pixels':thumb_width_pixels,
                   'thumb_height_pixels':thumb_height_pixels,
                   'comment':'<!-- machine generated; do not edit! -->'
                   }
    part_html=part_html_template.substitute(sub_dict)
    fp=open(part+".html","w")
    fp.write(part_html)
    fp.close() 
    
    # create the javascript file from a template, adding the necessary
    # image loads for the devices that are used in this "part".
    images_and_descriptions=""
    for (i,device) in enumerate(devices):
        try: 
            # convert description into a javascript multiline string:
            # (otherwise errors)
            description=device_descriptions[device].replace('\n','\\\n')
            description=description.replace('"',r'\"')
            images_and_descriptions=(images_and_descriptions+
                                     'images['+str(i+1)+']="'+
                                     'devices/'+
                                     device+"_thumb"+
                                     master_drawing_filetype+
                                     '";\n'+
                                     'descriptions['+str(i+1)+']="'+
                                     description+
                                     '";\n'
                                     )
        except KeyError:
            print "can't find info for: ", device
    fp=open("templates/part.js")
    javascript_template=string.Template(fp.read())
    fp.close()
    sub_dict={'images_and_descriptions':images_and_descriptions,
              'comment':'// machine generated; do not edit!'}
    javascript=javascript_template.substitute(sub_dict)                         
    fp=open(part+".js","w")
    fp.write(javascript)
    fp.close() 

def make_part_outlines(part):
    """\
    Takes a schematic diagram for a part named "PART.jpg" and makes 
    "PART_outlines.jpg" - a file of the same size with the devices surrounded
    by boxes based on info. found in the image map file: "PART.jpg.map"
    """

    # parse the image map file to find a list of all of the coordinates:
    fp=open(part+schematic_drawing_filetype+".map")
    image_map=fp.read()
    fp.close()
    boxes=[]
    for match in re.finditer(r'coords="(.*?)"',image_map):
        scoord=match.group(1).split(',')
        boxes.append([(int(scoord[0]),int(scoord[1])),
                     (int(scoord[2]),int(scoord[3]))])

    # draw the outlines:
    im=Image.open(part+schematic_drawing_filetype).convert("RGB")
    draw=ImageDraw.Draw(im)
    for box in boxes:
        # for a nice RGB color code see: http://www.tayloredmktg.com/rgb/ 
        draw.rectangle(box,outline=(0,206,209))

    # save the image with outlines:
    im.save(part+"_outlines"+schematic_drawing_filetype)

if __name__ == "__main__":
    # this does everything.  For improved speed when testing, you
    # may want to import this file as a module and call the functions
    # as required.

    # read in part and device descriptions.  We do this to get access
    # to the dictionary keys that tell us what parts and devices we
    # will have to deal with.
    execfile(config_filename)

    for part in part_descriptions.keys():
        make_part_outlines(part)

    for device in device_descriptions.keys():
        device_image_heights=make_device_images(device)

    make_default_image_thumb(device_image_heights)

    for device in device_descriptions.keys():
        make_device_page(device,device_image_heights)

    for part in part_descriptions.keys():
        make_part_page(part,device_image_heights)

